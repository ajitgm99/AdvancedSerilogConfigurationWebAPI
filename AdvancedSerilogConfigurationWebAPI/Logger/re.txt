Project Structure
SerilogAdvancedExample/
├── Controllers/
│   ├── WeatherForecastController.cs
├── Extensions/
│   ├── LoggingConfiguration.cs
│   ├── PerformanceLoggingExtensions.cs
├── Enrichers/
│   ├── CustomLogEnricher.cs
├── Program.cs
├── appsettings.json
├── appsettings.Development.json
└── WeatherForecast.cs
Complete Files
1. Program.cs
csharp
using Serilog;
using Serilog.Formatting.Json;
using SerilogAdvancedExample.Enrichers;
using SerilogAdvancedExample.Extensions;

var builder = WebApplication.CreateBuilder(args);

// Configure Serilog
builder.Host.ConfigureSerilog();

// Add services to the container.
builder.Services.AddControllers();

var app = builder.Build();

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

// Add request logging
app.UseSerilogRequestLogging(options =>
{
    options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =>
    {
        diagnosticContext.Set("RequestHost", httpContext.Request.Host.Value);
        diagnosticContext.Set("RequestScheme", httpContext.Request.Scheme);
        diagnosticContext.Set("RemoteIp", httpContext.Connection.RemoteIpAddress);
    };
});

app.Run();
2. Extensions/LoggingConfiguration.cs
csharp
using Serilog;
using Serilog.Exceptions;
using SerilogAdvancedExample.Enrichers;

namespace SerilogAdvancedExample.Extensions;

public static class LoggingConfiguration
{
    public static IHostBuilder ConfigureSerilog(this IHostBuilder hostBuilder)
    {
        return hostBuilder.UseSerilog((context, services, configuration) =>
        {
            var env = context.HostingEnvironment;
            
            configuration
                .ReadFrom.Configuration(context.Configuration)
                .ReadFrom.Services(services)
                .Enrich.FromLogContext()
                .Enrich.WithExceptionDetails()
                .Enrich.WithMachineName()
                .Enrich.WithProcessId()
                .Enrich.WithThreadId()
                .Enrich.With(new CustomLogEnricher())
                .WriteTo.Console(outputTemplate: "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} {NewLine}{Exception}")
                .WriteTo.File(
                    new JsonFormatter(),
                    Path.Combine("logs", $"{env.ApplicationName}-.json"),
                    rollingInterval: RollingInterval.Day,
                    retainedFileCountLimit: 7);
            
            if (env.IsDevelopment())
            {
                configuration.WriteTo.Debug();
            }
        });
    }
}
3. Extensions/PerformanceLoggingExtensions.cs
csharp
using System.Diagnostics;
using Microsoft.Extensions.Logging;

namespace SerilogAdvancedExample.Extensions;

public static class PerformanceLoggingExtensions
{
    public static IDisposable TimeOperation<T>(this ILogger<T> logger, 
        [System.Runtime.CompilerServices.CallerMemberName] string memberName = "",
        [System.Runtime.CompilerServices.CallerLineNumber] int lineNumber = 0)
    {
        var className = typeof(T).Name;
        return new TimingTracker(logger, className, memberName, lineNumber);
    }

    private class TimingTracker : IDisposable
    {
        private readonly ILogger _logger;
        private readonly string _className;
        private readonly string _methodName;
        private readonly int _lineNumber;
        private readonly Stopwatch _stopwatch;

        public TimingTracker(ILogger logger, string className, string methodName, int lineNumber)
        {
            _logger = logger;
            _className = className;
            _methodName = methodName;
            _lineNumber = lineNumber;
            _stopwatch = Stopwatch.StartNew();
            
            _logger.LogDebug("Starting {ClassName}.{MethodName} at line {LineNumber}", 
                _className, _methodName, _lineNumber);
        }

        public void Dispose()
        {
            _stopwatch.Stop();
            
            _logger.LogInformation("Completed {ClassName}.{MethodName} at line {LineNumber} in {ElapsedMilliseconds}ms", 
                _className, 
                _methodName, 
                _lineNumber, 
                _stopwatch.ElapsedMilliseconds);
        }
    }
}
4. Enrichers/CustomLogEnricher.cs
csharp
using Serilog.Core;
using Serilog.Events;

namespace SerilogAdvancedExample.Enrichers;

public class CustomLogEnricher : ILogEventEnricher
{
    public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)
    {
        var assemblyName = typeof(Program).Assembly.GetName().Name;
        var assemblyVersion = typeof(Program).Assembly.GetName().Version?.ToString() ?? "unknown";
        
        logEvent.AddPropertyIfAbsent(propertyFactory.CreateProperty("Application", assemblyName));
        logEvent.AddPropertyIfAbsent(propertyFactory.CreateProperty("Version", assemblyVersion));
        logEvent.AddPropertyIfAbsent(propertyFactory.CreateProperty("Environment", 
            Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Development"));
    }
}
5. Controllers/WeatherForecastController.cs
csharp
using Microsoft.AspNetCore.Mvc;
using SerilogAdvancedExample.Extensions;

namespace SerilogAdvancedExample.Controllers;

[ApiController]
[Route("[controller]")]
public class WeatherForecastController : ControllerBase
{
    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    private readonly ILogger<WeatherForecastController> _logger;

    public WeatherForecastController(ILogger<WeatherForecastController> logger)
    {
        _logger = logger;
    }

    [HttpGet(Name = "GetWeatherForecast")]
    public IEnumerable<WeatherForecast> Get()
    {
        using (_logger.TimeOperation<WeatherForecastController>())
        {
            try
            {
                _logger.LogInformation("Generating weather forecast");
                
                var forecast = Enumerable.Range(1, 5).Select(index =>
                    new WeatherForecast
                    {
                        Date = DateTime.Now.AddDays(index),
                        TemperatureC = Random.Shared.Next(-20, 55),
                        Summary = Summaries[Random.Shared.Next(Summaries.Length)]
                    })
                    .ToArray();

                return forecast;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating weather forecast");
                throw;
            }
        }
    }
}
6. WeatherForecast.cs
csharp
namespace SerilogAdvancedExample;

public class WeatherForecast
{
    public DateTime Date { get; set; }
    public int TemperatureC { get; set; }
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    public string? Summary { get; set; }
}
7. appsettings.json
json
{
  "Serilog": {
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Information",
        "System": "Warning"
      }
    },
    "WriteTo": [
      {
        "Name": "Console"
      },
      {
        "Name": "File",
        "Args": {
          "path": "logs/log-.json",
          "rollingInterval": "Day",
          "retainedFileCountLimit": 7,
          "formatter": "Serilog.Formatting.Json.JsonFormatter, Serilog"
        }
      }
    ],
    "Enrich": ["FromLogContext", "WithMachineName", "WithProcessId", "WithThreadId"]
  },
  "AllowedHosts": "*"
}
8. appsettings.Development.json
json
{
  "Serilog": {
    "MinimumLevel": {
      "Default": "Debug",
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Information",
        "System": "Warning"
      }
    }
  }
}
How to Create the Project
Create a new .NET 8 Web API project:

bash
dotnet new webapi -n SerilogAdvancedExample
cd SerilogAdvancedExample
Add required NuGet packages:

bash
dotnet add package Serilog
dotnet add package Serilog.AspNetCore
dotnet add package Serilog.Enrichers.Environment
dotnet add package Serilog.Enrichers.Thread
dotnet add package Serilog.Exceptions
dotnet add package Serilog.Sinks.Console
dotnet add package Serilog.Sinks.File
Create the folder structure and add all the files listed above.

Run the project:

bash
dotnet run
This complete implementation will give you advanced Serilog logging with:

Performance tracking

Detailed context information

Exception handling

Structured logging (JSON format)

Environment-specific configurations